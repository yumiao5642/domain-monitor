# Generated by Django 3.2.25 on 2025-04-18 06:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('nnd_admin', '超级管理员'), ('admin', '管理员'), ('user', '普通用户'), ('readonly', '只读用户'), ('disabled', '禁用用户')], default='user', max_length=20, verbose_name='角色')),
                ('mfa_secret', models.CharField(blank=True, max_length=100, null=True, verbose_name='MFA密钥')),
                ('mfa_enabled', models.BooleanField(default=False, verbose_name='是否启用MFA')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlertConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_token', models.CharField(max_length=255, verbose_name='Telegram Bot Token')),
                ('telegram_chat_id', models.CharField(max_length=255, verbose_name='Telegram Chat ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否启用')),
            ],
            options={
                'verbose_name': '告警配置',
                'verbose_name_plural': '告警配置',
                'db_table': 'alert_config',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(max_length=255, verbose_name='域名')),
                ('task_name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('check_interval', models.IntegerField(verbose_name='检测频率（秒）')),
                ('check_domain', models.BooleanField(default=True, verbose_name='监控域名到期')),
                ('check_cert', models.BooleanField(default=True, verbose_name='监控证书到期')),
                ('check_https', models.BooleanField(default=True, verbose_name='监控网站状态')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('next_check', models.DateTimeField(verbose_name='下次检测时间')),
                ('expire_date', models.DateTimeField(blank=True, null=True, verbose_name='到期时间')),
                ('group', models.CharField(blank=True, max_length=100, verbose_name='分组')),
                ('labels', models.CharField(blank=True, max_length=255, verbose_name='标签')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
            options={
                'verbose_name': '域名',
                'verbose_name_plural': '域名',
                'db_table': 'domain',
            },
        ),
        migrations.CreateModel(
            name='WebsiteMonitorResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='检测时间')),
                ('status_code', models.IntegerField(verbose_name='HTTP状态码')),
                ('response_time', models.FloatField(verbose_name='响应时间（秒）')),
                ('details', models.TextField(verbose_name='检测详情')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.domain', verbose_name='关联域名')),
            ],
            options={
                'verbose_name': '网站监控结果',
                'verbose_name_plural': '网站监控结果',
                'db_table': 'website_monitor_result',
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255, verbose_name='操作内容')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='操作时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='操作用户')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'db_table': 'operation_log',
            },
        ),
        migrations.CreateModel(
            name='DomainExpiryResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='检测时间')),
                ('status', models.CharField(max_length=50, verbose_name='状态')),
                ('details', models.TextField(verbose_name='检测详情')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.domain', verbose_name='关联域名')),
            ],
            options={
                'verbose_name': '域名到期检测结果',
                'verbose_name_plural': '域名到期检测结果',
                'db_table': 'domain_expiry_result',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issuer', models.CharField(max_length=255, verbose_name='发行者')),
                ('expiry_date', models.DateTimeField(verbose_name='证书到期时间')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.domain', verbose_name='关联域名')),
            ],
            options={
                'verbose_name': '证书',
                'verbose_name_plural': '证书',
                'db_table': 'certificate',
            },
        ),
        migrations.CreateModel(
            name='CertExpiryResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='检测时间')),
                ('status', models.CharField(max_length=50, verbose_name='状态')),
                ('details', models.TextField(verbose_name='检测详情')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.certificate', verbose_name='关联证书')),
            ],
            options={
                'verbose_name': '证书到期检测结果',
                'verbose_name_plural': '证书到期检测结果',
                'db_table': 'cert_expiry_result',
            },
        ),
    ]
